// ========== GLOBAL STYLES ========== //
@use './base/functions' as *;
@use './base/mixins' as *;

body {
  background-color: var(--color-black-sinister);
  font-family: var(--body-font-family);
  font-size: var(--body-font-size);
  font-weight: var(--body-font-weight);
  line-height: var(--body-line-height);
  color: var(--color-white);

  &:has(.preloader) {
    overflow: hidden;

    @include respond-above(md) {
      padding-right: var(--scrollbar-width);
    }
  }
}

// Scrollbars
* {
  // cursor: none;

  @include scrollbars(var(--scrollbar-width), var(--color-primary), var(--color-gray));
}

// Selection
::selection {
  background-color: var(--color-primary);
  color: var(--color-white);
}

// avoid content moving on overflow: hidden
.disable-scroll {
  position: fixed;
  left: 0;
  top: 0;
  overflow: hidden;
  width: 100%;
  height: 100vh;
}

// wrapper to prevent horizontal scroll
// if you want use position: sticky; - need to remove // overflow: hidden // !!!
.wrapper {
  overflow: hidden;
  min-height: 100vh;

  &--visible {
    @include respond-above(md) {
      overflow: visible;
    }
  }
}

// container
.container {
  margin: 0 auto;
  max-width: var(--container);
  padding: 0 var(--container-padding);

  &--sm {
    max-width: var(--container-sm);
  }

  &--lg {
    max-width: var(--container-lg);
  }
}

// section offset, immit container
.offset-container {
  padding-left: max(var(--container-padding), calc((100% - var(--content-width)) / 2));

  @include respond-below(md) {
    padding: 0 var(--container-padding);
  }
}

/* Hiding class, making content visible only to screen readers but not visually */
/* "sr" meaning "screen-reader" */
.sr-only:not(:focus, :active) {
  @include sr-only;
}

// ========== TYPOGRAPHY ========== //
.text-block {
  ol,
  ul {
    li {
      &:not(:last-child) {
        margin-bottom: rem(20);
      }
    }
  }

  ul {
    list-style: disc outside;
    padding-left: rem(20);
  }

  strong,
  b {
    font-weight: 700;
  }

  em,
  i {
    font-style: italic;
  }

  mark {
    background-color: var(--color-primary);
    color: var(--color-white);
  }

  del {
    background-color: #fbb;
    text-decoration: line-through;
  }

  ins {
    background-color: #d4fcbc;
    text-decoration: none;
  }

  blockquote {
    border-left: rem(2) solid var(--color-primary);
    padding-left: rem(16);
  }

  > *:not(:last-child) {
    margin-bottom: rem(20);
  }
}

a[x-apple-data-detectors] {
  font-family: inherit !important;
  font-size: inherit !important;
  font-weight: inherit !important;
  line-height: inherit !important;
  text-decoration: none !important;
  color: inherit !important;
}

picture {
  display: inline-block;

  img {
    vertical-align: middle;
  }
}

code {
  border: 1px dashed #999;
  border-radius: 0.2rem;
  padding: 0.1rem 0.3rem 0.2rem;
  background: #fff3f4;
  box-decoration-break: clone;
  word-wrap: break-word;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  font-family: var(--display-font-family);
  font-weight: var(--display-font-weight);
  line-height: var(--display-line-height);
}

h1,
.h1 {
  font-size: rem(96);

  @include respond-below(xl) {
    font-size: rem(80);
  }

  @include respond-below(md) {
    font-size: rem(42);
  }

  @include respond-below(sm) {
    font-size: rem(36);
  }
}

h2,
.h2 {
  font-size: rem(48);

  @include respond-below(md) {
    font-size: rem(42);
  }

  @include respond-below(sm) {
    font-size: rem(32);
  }
}

h3,
.h3 {
  font-size: rem(24);

  @include respond-below(md) {
    font-size: rem(20);
  }
}

h4,
.h4 {
  font-size: rem(20);

  @include respond-below(md) {
    font-size: rem(18);
  }
}

h5,
.h5 {
  font-size: 1rem;
}

h6,
.h6 {
  font-size: 0.75rem;
}

// Pages List
.pages-list {
  padding-left: 1rem;

  > li {
    &:not(:last-child) {
      margin-bottom: 0.5rem;
    }

    a {
      text-decoration: underline;
      transition: color var(--transition-duration-primary);

      @include hover {
        color: var(--color-primary);
      }
    }
  }
}

// Swiper Settings
.swiper-texts {
  .swiper-wrapper {
    transition-timing-function: linear;
  }
}

// Adaptive Vars
:root {
  @include respond-below(md) {
    --container-padding: 1.25rem;
  }
}
